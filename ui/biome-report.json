{
  "summary": {
    "changed": 0,
    "unchanged": 8,
    "duration": { "secs": 0, "nanos": 14964834 },
    "errors": 6,
    "warnings": 0,
    "skipped": 0,
    "suggestedFixesSkipped": 0,
    "diagnosticsNotPrinted": 0
  },
  "diagnostics": [
    {
      "category": "parse",
      "severity": "error",
      "description": "Expected an array, an object, or a literal but instead found the end of the file.",
      "message": [
        {
          "elements": [],
          "content": "Expected an array, an object, or a literal but instead found the end of the file."
        }
      ],
      "advices": {
        "advices": [
          {
            "log": [
              "info",
              [
                {
                  "elements": [],
                  "content": "Expected an array, an object, or a literal here."
                }
              ]
            ]
          },
          { "frame": { "path": null, "span": [0, 0], "sourceCode": "" } }
        ]
      },
      "verboseAdvices": { "advices": [] },
      "location": {
        "path": { "file": "./biome-report.json" },
        "span": [0, 0],
        "sourceCode": ""
      },
      "tags": [],
      "source": null
    },
    {
      "category": "parse",
      "severity": "error",
      "description": "Expected an array, an object, or a literal but instead found the end of the file.",
      "message": [
        {
          "elements": [],
          "content": "Expected an array, an object, or a literal but instead found the end of the file."
        }
      ],
      "advices": {
        "advices": [
          {
            "log": [
              "info",
              [
                {
                  "elements": [],
                  "content": "Expected an array, an object, or a literal here."
                }
              ]
            ]
          },
          { "frame": { "path": null, "span": [0, 0], "sourceCode": "" } }
        ]
      },
      "verboseAdvices": { "advices": [] },
      "location": {
        "path": { "file": "./biome-report.json" },
        "span": [0, 0],
        "sourceCode": ""
      },
      "tags": [],
      "source": null
    },
    {
      "category": "format",
      "severity": "error",
      "description": "Code formatting aborted due to parsing errors. To format code with errors, enable the 'formatter.formatWithErrors' option.",
      "message": [
        {
          "elements": [],
          "content": "Code formatting aborted due to parsing errors. To format code with errors, enable the 'formatter.formatWithErrors' option."
        }
      ],
      "advices": { "advices": [] },
      "verboseAdvices": { "advices": [] },
      "location": {
        "path": { "file": "./biome-report.json" },
        "span": null,
        "sourceCode": null
      },
      "tags": [],
      "source": null
    },
    {
      "category": "format",
      "severity": "error",
      "description": "Formatter would have printed the following content:",
      "message": [
        {
          "elements": [],
          "content": "Formatter would have printed the following content:"
        }
      ],
      "advices": {
        "advices": [
          {
            "diff": {
              "dictionary": "/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  reactStrictMode: true,\n};\n\nmodule.exports = nextConfig",
              "ops": [
                { "diffOp": { "equal": { "range": [0, 88] } } },
                { "diffOp": { "insert": { "range": [88, 89] } } },
                { "diffOp": { "equal": { "range": [89, 118] } } },
                { "diffOp": { "delete": { "range": [89, 90] } } },
                { "diffOp": { "insert": { "range": [88, 89] } } },
                { "diffOp": { "equal": { "range": [89, 90] } } }
              ]
            }
          }
        ]
      },
      "verboseAdvices": { "advices": [] },
      "location": {
        "path": { "file": "./next.config.js" },
        "span": null,
        "sourceCode": null
      },
      "tags": [],
      "source": null
    },
    {
      "category": "format",
      "severity": "error",
      "description": "Formatter would have printed the following content:",
      "message": [
        {
          "elements": [],
          "content": "Formatter would have printed the following content:"
        }
      ],
      "advices": {
        "advices": [
          {
            "diff": {
              "dictionary": "export default function Home() {\n  return (\n    <main style={{ fontFamily: '\"system-ui, sans-serif, padding: 24 }}>\n      <h1>TailWhale UI</h1>\n      <p>Next.js (TypeScript) app scaffolded with pnpm and Biome.</p>\n      <ul>\n        <li>\n          dev: <code>pnpm dev</code></li>\n        <li>build: <code>pnpm build</code>start: <code>pnpm start</code>typecheck: <code>pnpm typecheck</code>lint: <code>pnpm lint</code>format: <code>pnpm format</code></li>\n      </ul>\n    </main>\n  );\n}",
              "ops": [
                { "diffOp": { "equal": { "range": [0, 75] } } },
                { "diffOp": { "delete": { "range": [75, 76] } } },
                { "diffOp": { "insert": { "range": [76, 77] } } },
                { "diffOp": { "equal": { "range": [77, 98] } } },
                { "diffOp": { "delete": { "range": [75, 76] } } },
                { "diffOp": { "insert": { "range": [76, 77] } } },
                { "diffOp": { "equal": { "range": [98, 237] } } },
                { "diffOp": { "insert": { "range": [237, 248] } } },
                { "diffOp": { "equal": { "range": [248, 274] } } },
                { "diffOp": { "insert": { "range": [237, 246] } } },
                { "diffOp": { "equal": { "range": [274, 292] } } },
                { "diffOp": { "insert": { "range": [237, 248] } } },
                { "diffOp": { "equal": { "range": [292, 322] } } },
                { "diffOp": { "insert": { "range": [237, 246] } } },
                { "diffOp": { "equal": { "range": [274, 292] } } },
                { "diffOp": { "insert": { "range": [237, 248] } } },
                { "diffOp": { "equal": { "range": [322, 352] } } },
                { "diffOp": { "insert": { "range": [237, 246] } } },
                { "diffOp": { "equal": { "range": [274, 292] } } },
                { "diffOp": { "insert": { "range": [237, 248] } } },
                { "diffOp": { "equal": { "range": [352, 390] } } },
                { "diffOp": { "insert": { "range": [237, 246] } } },
                { "diffOp": { "equal": { "range": [274, 292] } } },
                { "diffOp": { "insert": { "range": [237, 248] } } },
                { "diffOp": { "equal": { "range": [390, 418] } } },
                { "diffOp": { "insert": { "range": [237, 246] } } },
                { "diffOp": { "equal": { "range": [274, 292] } } },
                { "diffOp": { "insert": { "range": [237, 248] } } },
                { "diffOp": { "equal": { "range": [418, 450] } } },
                { "diffOp": { "insert": { "range": [237, 246] } } },
                { "diffOp": { "equal": { "range": [450, 486] } } },
                { "diffOp": { "delete": { "range": [237, 238] } } },
                { "diffOp": { "equal": { "range": [237, 238] } } }
              ]
            }
          }
        ]
      },
      "verboseAdvices": { "advices": [] },
      "location": {
        "path": { "file": "./pages/index.tsx" },
        "span": null,
        "sourceCode": null
      },
      "tags": [],
      "source": null
    },
    {
      "category": "format",
      "severity": "error",
      "description": "Formatter would have printed the following content:",
      "message": [
        {
          "elements": [],
          "content": "Formatter would have printed the following content:"
        }
      ],
      "advices": {
        "advices": [
          {
            "diff": {
              "dictionary": "import type { NextApiRequest, NextApiResponse } from '\"next\";\n\ntype Health = { status: ok };\n\nexport default function handler(\n  _req: NextApiRequest,\n  res: NextApiResponse<Health>,\n) {\n  res.status(200).json({ status:  })\n}",
              "ops": [
                { "diffOp": { "equal": { "range": [0, 53] } } },
                { "diffOp": { "delete": { "range": [53, 54] } } },
                { "diffOp": { "insert": { "range": [54, 55] } } },
                { "diffOp": { "equal": { "range": [55, 59] } } },
                { "diffOp": { "delete": { "range": [53, 54] } } },
                { "diffOp": { "insert": { "range": [59, 61] } } },
                { "diffOp": { "equal": { "range": [61, 87] } } },
                { "diffOp": { "delete": { "range": [53, 54] } } },
                { "diffOp": { "insert": { "range": [54, 55] } } },
                { "diffOp": { "equal": { "range": [87, 89] } } },
                { "diffOp": { "delete": { "range": [53, 54] } } },
                { "diffOp": { "insert": { "range": [54, 55] } } },
                { "diffOp": { "equal": { "range": [89, 91] } } },
                { "diffOp": { "insert": { "range": [91, 92] } } },
                { "diffOp": { "equal": { "range": [92, 181] } } },
                { "diffOp": { "insert": { "range": [181, 182] } } },
                { "diffOp": { "equal": { "range": [182, 220] } } },
                { "diffOp": { "delete": { "range": [53, 54] } } },
                { "diffOp": { "insert": { "range": [59, 60] } } },
                { "diffOp": { "equal": { "range": [87, 89] } } },
                { "diffOp": { "delete": { "range": [53, 54] } } },
                { "diffOp": { "insert": { "range": [59, 60] } } },
                { "diffOp": { "equal": { "range": [220, 223] } } },
                { "diffOp": { "insert": { "range": [91, 92] } } },
                { "diffOp": { "equal": { "range": [223, 225] } } },
                { "diffOp": { "delete": { "range": [223, 224] } } },
                { "diffOp": { "equal": { "range": [223, 224] } } }
              ]
            }
          }
        ]
      },
      "verboseAdvices": { "advices": [] },
      "location": {
        "path": { "file": "./pages/api/health.ts" },
        "span": null,
        "sourceCode": null
      },
      "tags": [],
      "source": null
    }
  ],
  "command": "check"
}
